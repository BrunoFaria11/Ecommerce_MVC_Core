@model Ecommerce_MVC_Core.ViewModel.ProductSizeViewModel
<style>
    input[type="file"] {
        display: none;
    }
</style>
<form id="size_form" tabindex="-1" enctype="multipart/form-data">
    @await Html.PartialAsync("_ModalHeader", new ModalHeader { Heading = $"{(Model.Id <= 0 ? "" : "")} Tamanho" })

    <div class="form-horizontal" style="padding:24px">

        <div class="text-danger" asp-validation-summary="ModelOnly"></div>
        @Html.HiddenFor(m => m.Id)

        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label asp-for="Size" class="col-sm-2 col-form-label">Tamanho</label>
                    <input asp-for="Size" name="Size" class="form-control" autofocus="" />

                </div>
            </div>

        </div>
    </div>


    @await Html.PartialAsync("_ModalFooter", new ModalFooter { urlPOST = "", IdEntity = Model.Id.ToString(), IdForm = "size_form" })
</form>

<script>




      $.validator.setDefaults({
        submitHandler: function () {
            event.preventDefault();

              const IdProduct = doAjax("Color/AddSize", "@Model.Id", "#size_form");
        }
    });

    $('#size_form').validate({
        rules: {
            Size: {
                required: true,
            },     
        },
        messages: {
            Size: {
                required: "Insira um tamanho",
            },
           
        },

        errorElement: 'span',
        errorPlacement: function (error, element) {
         
            error.addClass('invalid-feedback');
            element.closest('.form-group').append(error);
        },
        highlight: function (element, errorClass, validClass) {
            $(element).addClass('is-invalid');
        },
        unhighlight: function (element, errorClass, validClass) {
            $(element).removeClass('is-invalid');
        }
    });

</script>